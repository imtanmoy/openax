components:
    schemas:
        ApiResponse:
            properties:
                code:
                    format: int32
                    type: integer
                message:
                    type: string
                type:
                    type: string
            type: object
            xml:
                name: '##default'
        Category:
            properties:
                id:
                    example: 1
                    format: int64
                    type: integer
                name:
                    example: Dogs
                    type: string
            type: object
            xml:
                name: category
        Pet:
            properties:
                category:
                    $ref: '#/components/schemas/Category'
                id:
                    example: 10
                    format: int64
                    type: integer
                name:
                    example: doggie
                    type: string
                photoUrls:
                    items:
                        type: string
                        xml:
                            name: photoUrl
                    type: array
                    xml:
                        wrapped: true
                status:
                    description: pet status in the store
                    enum:
                        - available
                        - pending
                        - sold
                    type: string
                tags:
                    items:
                        $ref: '#/components/schemas/Tag'
                    type: array
                    xml:
                        wrapped: true
            required:
                - name
                - photoUrls
            type: object
            xml:
                name: pet
        Tag:
            properties:
                id:
                    format: int64
                    type: integer
                name:
                    type: string
            type: object
            xml:
                name: tag
    securitySchemes:
        api_key:
            in: header
            name: api_key
            type: apiKey
        petstore_auth:
            flows:
                implicit:
                    authorizationUrl: https://petstore3.swagger.io/oauth/authorize
                    scopes:
                        read:pets: read your pets
                        write:pets: modify pets in your account
            type: oauth2
externalDocs:
    description: Find out more about Swagger
    url: https://swagger.io
info:
    contact:
        email: apiteam@swagger.io
    description: |-
        This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
        Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
        You can now help us improve the API whether it's by making changes to the definition itself or to the code.
        That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

        Some useful links:
        - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
        - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
    license:
        name: Apache 2.0
        url: https://www.apache.org/licenses/LICENSE-2.0.html
    termsOfService: https://swagger.io/terms/
    title: Swagger Petstore - OpenAPI 3.0
    version: 1.0.27
openapi: 3.0.4
paths:
    /pet:
        post:
            description: Add a new pet to the store.
            operationId: addPet
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Pet'
                    application/x-www-form-urlencoded:
                        schema:
                            $ref: '#/components/schemas/Pet'
                    application/xml:
                        schema:
                            $ref: '#/components/schemas/Pet'
                description: Create a new pet in the store
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Pet'
                        application/xml:
                            schema:
                                $ref: '#/components/schemas/Pet'
                    description: Successful operation
                "400":
                    description: Invalid input
                "422":
                    description: Validation exception
                default:
                    description: Unexpected error
            security:
                - petstore_auth:
                    - write:pets
                    - read:pets
            summary: Add a new pet to the store.
            tags:
                - pet
        put:
            description: Update an existing pet by Id.
            operationId: updatePet
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Pet'
                    application/x-www-form-urlencoded:
                        schema:
                            $ref: '#/components/schemas/Pet'
                    application/xml:
                        schema:
                            $ref: '#/components/schemas/Pet'
                description: Update an existent pet in the store
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Pet'
                        application/xml:
                            schema:
                                $ref: '#/components/schemas/Pet'
                    description: Successful operation
                "400":
                    description: Invalid ID supplied
                "404":
                    description: Pet not found
                "422":
                    description: Validation exception
                default:
                    description: Unexpected error
            security:
                - petstore_auth:
                    - write:pets
                    - read:pets
            summary: Update an existing pet.
            tags:
                - pet
    /pet/{petId}:
        delete:
            description: Delete a pet.
            operationId: deletePet
            parameters:
                - in: header
                  name: api_key
                  schema:
                    type: string
                - description: Pet id to delete
                  in: path
                  name: petId
                  required: true
                  schema:
                    format: int64
                    type: integer
            responses:
                "200":
                    description: Pet deleted
                "400":
                    description: Invalid pet value
                default:
                    description: Unexpected error
            security:
                - petstore_auth:
                    - write:pets
                    - read:pets
            summary: Deletes a pet.
            tags:
                - pet
        get:
            description: Returns a single pet.
            operationId: getPetById
            parameters:
                - description: ID of pet to return
                  in: path
                  name: petId
                  required: true
                  schema:
                    format: int64
                    type: integer
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Pet'
                        application/xml:
                            schema:
                                $ref: '#/components/schemas/Pet'
                    description: successful operation
                "400":
                    description: Invalid ID supplied
                "404":
                    description: Pet not found
                default:
                    description: Unexpected error
            security:
                - api_key: []
                - petstore_auth:
                    - write:pets
                    - read:pets
            summary: Find pet by ID.
            tags:
                - pet
        post:
            description: Updates a pet resource based on the form data.
            operationId: updatePetWithForm
            parameters:
                - description: ID of pet that needs to be updated
                  in: path
                  name: petId
                  required: true
                  schema:
                    format: int64
                    type: integer
                - description: Name of pet that needs to be updated
                  in: query
                  name: name
                  schema:
                    type: string
                - description: Status of pet that needs to be updated
                  in: query
                  name: status
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Pet'
                        application/xml:
                            schema:
                                $ref: '#/components/schemas/Pet'
                    description: successful operation
                "400":
                    description: Invalid input
                default:
                    description: Unexpected error
            security:
                - petstore_auth:
                    - write:pets
                    - read:pets
            summary: Updates a pet in the store with form data.
            tags:
                - pet
    /pet/{petId}/uploadImage:
        post:
            description: Upload image of the pet.
            operationId: uploadFile
            parameters:
                - description: ID of pet to update
                  in: path
                  name: petId
                  required: true
                  schema:
                    format: int64
                    type: integer
                - description: Additional Metadata
                  in: query
                  name: additionalMetadata
                  schema:
                    type: string
            requestBody:
                content:
                    application/octet-stream:
                        schema:
                            format: binary
                            type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ApiResponse'
                    description: successful operation
                "400":
                    description: No file uploaded
                "404":
                    description: Pet not found
                default:
                    description: Unexpected error
            security:
                - petstore_auth:
                    - write:pets
                    - read:pets
            summary: Uploads an image.
            tags:
                - pet
    /pet/findByStatus:
        get:
            description: Multiple status values can be provided with comma separated strings.
            operationId: findPetsByStatus
            parameters:
                - description: Status values that need to be considered for filter
                  explode: true
                  in: query
                  name: status
                  required: true
                  schema:
                    default: available
                    enum:
                        - available
                        - pending
                        - sold
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/Pet'
                                type: array
                        application/xml:
                            schema:
                                items:
                                    $ref: '#/components/schemas/Pet'
                                type: array
                    description: successful operation
                "400":
                    description: Invalid status value
                default:
                    description: Unexpected error
            security:
                - petstore_auth:
                    - write:pets
                    - read:pets
            summary: Finds Pets by status.
            tags:
                - pet
    /pet/findByTags:
        get:
            description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
            operationId: findPetsByTags
            parameters:
                - description: Tags to filter by
                  explode: true
                  in: query
                  name: tags
                  required: true
                  schema:
                    items:
                        type: string
                    type: array
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/Pet'
                                type: array
                        application/xml:
                            schema:
                                items:
                                    $ref: '#/components/schemas/Pet'
                                type: array
                    description: successful operation
                "400":
                    description: Invalid tag value
                default:
                    description: Unexpected error
            security:
                - petstore_auth:
                    - write:pets
                    - read:pets
            summary: Finds Pets by tags.
            tags:
                - pet
servers:
    - url: /api/v3
tags:
    - description: Everything about your Pets
      externalDocs:
        description: Find out more
        url: https://swagger.io
      name: pet
